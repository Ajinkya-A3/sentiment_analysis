name: Blue-Green CI/CD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "blue"
        type: choice
        options:
          - blue
          - green

      skipBuild:
        description: "Skip Docker image build & push"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

      switchTraffic:
        description: "Switch service and HPA to selected environment"
        required: true
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install security tools (Trivy & Gitleaks)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release gitleaks
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y && sudo apt-get install -y trivy

      - name: Run Trivy filesystem scan
        run: trivy fs --format table -o fs-report.txt .

      - name: Run Gitleaks scan
        run: gitleaks detect --source . --report-format json --report-path gitleaks-report.json

      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scans
          path: |
            fs-report.txt
            gitleaks-report.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies and test
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          PYTHONPATH=$(pwd) pytest tests/

  docker-image-push:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ inputs.skipBuild == 'false' }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set short commit hash
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set tag based on environment
        run: |
          VERSION=${{ inputs.environment }}
          TAG_PREFIX=$( [[ "$VERSION" == "blue" ]] && echo "blu" || echo "grn" )
          echo "IMAGE_TAG=$TAG_PREFIX-${SHORT_SHA}" >> $GITHUB_ENV

      - name: Install security tools (Trivy )
        run: |
          sudo apt-get update -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y && sudo apt-get install -y trivy

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Scan Docker image with Trivy
        run: trivy image --format table -o trivy-image-scan.txt $IMAGE_NAME:$IMAGE_TAG

      - name: Upload image scan report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-scan
          path: trivy-image-scan.txt

      - name: Push Docker image
        run: docker push $IMAGE_NAME:$IMAGE_TAG

  update-manifests:
    runs-on: ubuntu-latest
    needs: [test, docker-image-push]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set variables
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG_PREFIX=$( [[ "${{ inputs.environment }}" == "blue" ]] && echo "blu" || echo "grn" )
          echo "IMAGE_TAG=$TAG_PREFIX-$SHORT_SHA" >> $GITHUB_ENV

      - name: Update deployment manifest with image tag
        run: |
          DEPLOYMENT_FILE="K8s_setup/${{ inputs.environment }}-app-deployment.yaml"
          sed -i "s|\(image: .*:\).*|\1$IMAGE_TAG|" $DEPLOYMENT_FILE

      - name: Update service and HPA if switchTraffic = true
        if: ${{ inputs.switchTraffic == 'true' }}
        run: |
          VERSION=${{ inputs.environment }}

          # Update app-service.yaml selector
          sed -i "s/version: .*/version: ${VERSION}/" K8s_setup/app-service.yaml

          # Update app-hpa.yaml scaleTargetRef safely
          sed -i "/scaleTargetRef:/,/minReplicas:/ s/name: .*/name: flask-app-${VERSION}/" K8s_setup/app-hpa.yaml

      - name: Commit and push manifest changes using PAT
        env:
          GIT_USERNAME: github-actions
          GIT_PASSWORD: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "${GIT_USERNAME}"
          git config user.email "${GIT_USERNAME}@github.com"

          # Set remote with PAT-based HTTPS URL
          git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${{ github.repository }}
          git remote -v  # ‚úÖ Debug: confirm remote uses PAT

          git add K8s_setup/
          if git diff --cached --quiet; then
            echo "üü° No changes to commit."
          else
            git commit -m "üöÄ Deploy ${{ inputs.environment }} | Tag: ${{ env.IMAGE_TAG }} | Build: ${{ inputs.skipBuild }} | Traffic: ${{ inputs.switchTraffic }}"

            # üîê Push using PAT-embedded full URL
            git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}
          fi

